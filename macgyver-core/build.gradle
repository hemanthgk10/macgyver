import org.ajoberstar.grgit.*

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'groovy'
apply plugin:'application'
apply plugin: 'spring-boot' 

configurations {
all*.exclude group: 'org.apache.maven.scm'
all*.exclude group: 'org.codehaus.groovy', module: 'groovy'
all*.exclude group: 'log4j'
all*.exclude group: 'xml-apis'
all*.exclude group: 'commons-logging'
//all*.exclude group: 'javax.validation'

}
mainClassName = 'io.macgyver.core.ServerMain'


dependencies {
    
    compile "org.apache.httpcomponents:httpcore:${APACHE_HTTPCORE_VERSION}" // dependency FU
    compile "org.apache.httpcomponents:httpclient:${APACHE_HTTPCLIENT_VERSION}"
    

    compile "org.codehaus.groovy:groovy-all:${GROOVY_VERSION}"
    compile "org.slf4j:jcl-over-slf4j:${SLF4J_VERSION}"
    compile "io.macgyver.neorx:neorx:${NEORX_VERSION}"
    compile "io.macgyver.okrest:okrest:${OKREST1_VERSION}"
	compile "io.macgyver.okrest3:okrest:${OKREST3_VERSION}"
    compile "com.google.guava:guava:${GUAVA_VERSION}"
    compile 'com.google.code.gson:gson:2.3.1'
    
	compile "io.reactivex:rxjava-guava:1.0.3"
	
    //compile "io.macgyver.rx-aws:rx-aws:${RX_AWS_VERSION}"
    compile 'com.fasterxml.uuid:java-uuid-generator:3.1.4'
    compile "org.springframework:spring-context-support:${SPRING_VERSION}"
    compile "org.springframework:spring-tx:${SPRING_VERSION}"
    
    compile 'org.ocpsoft.prettytime:prettytime:4.0.1.Final'
    compile 'joda-time:joda-time:2.7'
    
    compile "com.fasterxml.jackson.core:jackson-databind:${JACKSON_VERSION}"
    compile "com.fasterxml.jackson.core:jackson-core:${JACKSON_VERSION}"
    compile "com.fasterxml.jackson.core:jackson-annotations:${JACKSON_VERSION}"
    
    compile "io.dropwizard.metrics:metrics-core:${DROPWIZARD_METRICS_VERSION}"
    compile 'com.lambdaworks:scrypt:1.4.0'
	compile 'it.sauronsoftware.cron4j:cron4j:2.2.5'

	compile "net.jodah:failsafe:${FAILSAFE_VERSION}"
	compile 'org.aspectj:aspectjweaver:1.8.5'
	
	compile 'jaxen:jaxen:1.1.6'  // needed???
    
    compile 'com.thoughtworks.proxytoys:proxytoys:1.0'
    compile 'cglib:cglib-nodep:3.1'
    
    compile "org.bouncycastle:bcprov-jdk15on:${BOUNCYCASTLE_VERSION}"
    compile "org.bouncycastle:bcpkix-jdk15on:${BOUNCYCASTLE_VERSION}"

    // compile "javax.ws.rs:jsr311-api:${JSR311_VERSION}" // NOT SURE WHY THIS DOESN'T WORK
    compile "org.jboss.resteasy:jaxrs-api:${RESTEASY_VERSION}"
    
    compile 'javax.inject:javax.inject:1'
    compile 'com.ning:async-http-client:1.7.23'
    
    compile "com.squareup.okhttp:okhttp:${OKHTTP2_VERSION}"
    compile "com.squareup.okhttp:okhttp-urlconnection:${OKHTTP2_VERSION}"
    
    compile "com.squareup.okhttp3:logging-interceptor:${OKHTTP3_VERSION}"
    
    compile 'com.squareup.mimecraft:mimecraft:1.1.1'
    
    compile 'com.amazonaws:jmespath-java:1.0'
    
	compile "ch.qos.logback:logback-classic:${LOGBACK_VERSION}"
    compile "org.lendingclub.mercator:mercator-core:${MERCATOR_VERSION}"
    compile "org.lendingclub:reflex:${REFLEX_VERSION}"
    compile("org.springframework.boot:spring-boot-starter-web:${SPRING_BOOT_VERSION}")
    compile("org.springframework.boot:spring-boot-starter-remote-shell:${SPRING_BOOT_VERSION}")
    
    compile("org.springframework.boot:spring-boot-starter-security:${SPRING_BOOT_VERSION}")
    compile "org.springframework.security:spring-security-ldap:${SPRING_SECURITY_VERSION}"

	compile 'net.lingala.zip4j:zip4j:1.3.2'

	compile "org.bouncycastle:bcpkix-jdk15on:${BOUNCYCASTLE_VERSION}"
	compile "org.bouncycastle:bcprov-jdk15on:${BOUNCYCASTLE_VERSION}"
	
    compile "org.kohsuke:akuma:1.9"
    
    compile 'org.jdom:jdom2:2.0.6'
    
    compile "org.rapidoid:rapidoid-fluent:${RAPIDOID_VERSION}"
    compile "org.rapidoid:rapidoid-u:${RAPIDOID_VERSION}"
    compile("io.springfox:springfox-swagger2:${SPRINGFOX_VERSION}")
    compile("io.springfox:springfox-swagger-ui:${SPRINGFOX_VERSION}") 
     
   /* compile(group: 'javax.validation', name: 'validation-api', version: '1.1.0.Final') { 
          artifact { 
              name = "validation-api" 
              type = 'jar' 
          } 
          artifact { 
              name = "validation-api" 
              classifier = 'sources' 
              type = 'jar' 
          } 
      } 
	   */

	  

	compile 'org.hjson:hjson:1.1.2'


    
    compile 'org.webjars:bootstrap:3.3.1'
    compile "org.webjars:jquery:2.1.1"
    compile "org.webjars:ace:1.1.3"
    
    //compile 'com.samskivert:jmustache:1.10'
    compile 'org.grails:grails-gsp-spring-boot:1.0.0'
    
    compile project(':macgyver-cli')
    testCompile("org.springframework.boot:spring-boot-starter-test:${SPRING_BOOT_VERSION}")
    testCompile "org.springframework:spring-test:${SPRING_VERSION}"
    testCompile group: "junit", name: "junit", version: "${JUNIT_VERSION}"
    testCompile project(':macgyver-test')

}

processResources.doLast() {
    ant.copy(tofile: "src/main/resources/cli/macgyver-cli-capsule.jar", file: "../macgyver-cli/build/libs/macgyver-cli-${project.version}-capsule.jar",overwrite:true, failonerror:false)
    
}
compileJava.doLast() {
    def p = new Properties()

    p.setProperty("version",project.version)
    p.setProperty("artifactId",project.name)
    p.setProperty("groupId","io.macgyver")
    
    def gitrepo = Grgit.open(project.file('..'))
    p.setProperty("gitCommitId",gitrepo.head().id)
    p.setProperty("gitShortCommitId",p.gitCommitId.substring(0,7))
    p.setProperty("githubCommitUrl","https://github.com/LendingClub/macgyver/commit/${p.gitCommitId}")
    p.setProperty("gitBranchName",new org.ajoberstar.grgit.service.BranchService(gitrepo.repository).getCurrent().getName())
    p.setProperty("gitBranchFullName",new org.ajoberstar.grgit.service.BranchService(gitrepo.repository).getCurrent().getFullName())
    new File("${project.projectDir}/src/main/resources/macgyver-core-revision.properties").withOutputStream {
        p.store(it,"revision info")
    }
    
}


processResources.doLast() {

}

task showRepos  {
    println "All repos:"
    println repositories.collect { it.name }
}

run {  
    systemProperty "logging.config", "./config/logback.xml"
    if ( project.hasProperty("macgyver.project.dir")) {
        systemProperty "macgyver.project.dir", project['macgyver.project.dir']
    }
    if ( project.hasProperty("appArgs") ) {  
        args Eval.me(appArgs)  
    }  
}
